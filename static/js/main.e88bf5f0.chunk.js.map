{"version":3,"sources":["components/ColorCard.js","utils/utils.js","components/RestartButton.js","components/GameMessage.js","components/Score.js","components/StartGameModal.js","App.js","reportWebVitals.js","index.js"],"names":["ColorCard","color","onClick","flash","className","wait","ms","a","Promise","resolve","setTimeout","RestartButton","gameData","score","GameMessage","simonTurn","playerTurn","isGameOver","Score","props","name","StartGameModal","onSubmit","onChange","value","placeholder","disabled","type","FLASH_INTERVAL","App","colorList","initGameData","isFlashing","isUserPlaying","colors","round","userColors","playerName","useState","isGameOn","setGameOn","setGameData","newPlayerName","setNewPlayerName","flashColor","setFlashColor","playersData","setPlayersData","useEffect","newColor","Math","floor","random","length","nextRoundColors","flashColors","i","userGuessedColors","userClickHandle","guessedColor","remainingColorsToGuess","nextColorToGuess","shift","concat","id","Date","now","restartGame","gameNotStarted","isSimonTurn","isPlayerTurn","_","map","colorIndex","event","nameValue","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e88bf5f0.chunk.js","sourcesContent":["export default function ColorCard({color, onClick, flash}) {\n  return (\n    <div\n      onClick={onClick}\n      className={`color-circle-button ${color} ${flash ? \"flash\" : \"\"}`}/>\n  )\n}","export default async function wait (ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n","export function RestartButton({gameData, onClick}) {\n  return <div className=\"lost\">\n    <div>You lost... </div>\n    <div>Your score: {gameData.score}</div>\n    <button onClick={onClick}>Restart</button>\n  </div>;\n}","export function GameMessage({simonTurn, playerTurn, isGameOver}) {\n  return <div>\n    {simonTurn && (\n      <div>Simon say...</div>\n    )}\n\n    {playerTurn && (\n      <div>Now do as Simon said</div>\n    )}\n\n    {isGameOver && (\n      <div>The game is over</div>\n    )}\n  </div>;\n}","export function Score(props) {\n  return <ul>\n    <> {props.name}</>\n    <> , score: {props.score}</>\n  </ul>;\n\n}","export function StartGameModal(props) {\n  return <div className=\"modal\">\n    {/*<StartButton onClick={startGame}/>*/}\n\n    <form onSubmit={props.onSubmit}>\n      <input onChange={props.onChange}\n             value={props.value}\n             placeholder=\"Add your name here\"/>\n      <button\n        disabled={!props.value}\n        type=\"submit\">Start\n      </button>\n    </form>\n  </div>;\n}","import './App.css'\nimport * as _ from \"lodash\";\nimport {useEffect, useState} from \"react\"\nimport ColorCard from \"./components/ColorCard\"\nimport wait from \"./utils/utils\"\nimport {RestartButton} from \"./components/RestartButton\"\nimport {GameMessage} from \"./components/GameMessage\"\nimport {Score} from \"./components/Score\"\nimport {StartGameModal} from \"./components/StartGameModal\"\n\n\nconst FLASH_INTERVAL = 500 // ml\n\nfunction App() {\n  const colorList = [\"green\", \"red\", \"yellow\", \"blue\", \"purple\", \"pink\"]\n  const initGameData = {\n    isFlashing: false,\n    isUserPlaying: false,\n    colors: [],\n    round: 1,\n    userColors: [],\n    score: 0,\n    playerName: null\n  };\n\n  const [isGameOn, setGameOn] = useState(false)\n  const [gameData, setGameData] = useState(initGameData)\n  const [newPlayerName, setNewPlayerName] = useState(null)\n  const [flashColor, setFlashColor] = useState(null)\n  const [playersData, setPlayersData] = useState([])\n\n\n  useEffect(() => {\n    if (isGameOn) {\n      setGameData({...initGameData, isFlashing: true})\n    }\n  }, [isGameOn])\n\n  useEffect(() => {\n    if (isGameOn && gameData.isFlashing) {\n      // pick a new random color from our color list\n      const newColor = colorList[Math.floor(Math.random() * colorList.length)]\n      const nextRoundColors = [...gameData.colors, newColor]\n\n      setGameData({...gameData, colors: nextRoundColors})\n    }\n  }, [isGameOn, gameData.isFlashing])\n\n  useEffect( () => {\n    let shouldFlashColors = isGameOn && gameData.isFlashing && gameData.colors.length\n    if (shouldFlashColors) {\n      flashColors()\n    }\n  }, [isGameOn, gameData.isFlashing, gameData.colors.length])\n\n\n\n  const flashColors = async () => {\n    await wait(FLASH_INTERVAL)\n    for (let i = 0; i < gameData.colors.length; i++) {\n      setFlashColor(gameData.colors[i])\n      await wait(FLASH_INTERVAL)\n      setFlashColor(null)\n      await wait(FLASH_INTERVAL)\n\n      if (i === gameData.colors.length - 1) {\n\n        setGameData({\n          ...gameData,\n          isFlashing: false,\n          isUserPlaying: true,\n          userGuessedColors: [...gameData.colors],\n        });\n      }\n    }\n  }\n\n  const userClickHandle = async (guessedColor) => {\n    const {isFlashing, isUserPlaying} = gameData\n    if (!isFlashing && isUserPlaying) {\n      setFlashColor(guessedColor)\n      await wait(FLASH_INTERVAL)\n      setFlashColor(null)\n      const remainingColorsToGuess = [...gameData.userGuessedColors]\n      const nextColorToGuess = remainingColorsToGuess.shift()\n      // if user picked to right color\n      if (guessedColor === nextColorToGuess) {\n\n        // and user has more colors to guess\n        if (remainingColorsToGuess.length) {\n          // continue round with remaining colors\n          setGameData({...gameData, userGuessedColors: remainingColorsToGuess})\n        }\n        // else - round is finished successfully\n        else {\n          gameData.score += 10\n          setGameData({\n            ...gameData,\n            isFlashing: true,\n            isUserPlaying: false,\n            round: gameData.colors.length + 1,\n            userGuessedColors: [],\n          });\n        }\n      }\n      // else - user picked a wrong color\n      else {\n        await setPlayersData(playersData.concat({score: gameData.score, name: newPlayerName, id: Date.now()}))\n        // initialize new game\n        await setGameData({...initGameData, score: gameData.score})\n\n      }\n    }\n  }\n\n  const startGame = () => {\n    setGameOn(true)\n  }\n\n  const restartGame = async () => {\n    setNewPlayerName(null)\n    setGameOn(false)\n  }\n\n  const handleNameChange = (event) => {\n    const nameValue = event.target.value\n    setNewPlayerName(nameValue)\n  }\n\n  const gameNotStarted = !isGameOn && gameData.round === 1\n  const isGameOver = isGameOn && !gameData.isFlashing && !gameData.isUserPlaying && gameData.round > 0\n  const isSimonTurn = isGameOn && gameData.isFlashing\n  const isPlayerTurn = isGameOn && gameData.isUserPlaying\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"score-table\">\n        {\n          _.orderBy(playersData, [\"score\"], [\"desc\"]).map(\n            ({score, name, id}) => (\n              <Score key={id} name={name} score={score}/>\n            )\n          )\n        }\n      </div>\n      <GameMessage simonTurn={isSimonTurn} playerTurn={isPlayerTurn} isGameOver={isGameOver}/>\n      <div className=\"colors-container\">\n        {colorList.map((color, colorIndex) => (\n          <ColorCard key={colorIndex}\n                     onClick={() => userClickHandle(color)}\n                     flash={flashColor === color}\n                     color={color}\n          />\n        ))}\n      </div>\n      {isGameOver && (\n        <RestartButton gameData={gameData} onClick={restartGame}/>\n      )}\n      {gameNotStarted && (\n        <StartGameModal onSubmit={startGame} onChange={handleNameChange} value={newPlayerName}/>\n      )}\n\n      {isGameOn && (\n        <div className=\"score\">Score:{gameData.score}</div>\n      )}\n\n\n    </div>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}